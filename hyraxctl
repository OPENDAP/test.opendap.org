#!/bin/bash
#
# hyraxctl
# Can be used to start and stop the docker containers running Hyrax and the
# # Apache http services, either individually or together.
# In this implementation Apache httpd connects to Hyrax using AJP on port 8009.
#
# The functions are simple. Read the usage statement, and then read the code.
#
#

#########################################################################
# loggy()
#
# A handy logging function.
#
function loggy() {
    if test -n "${log_file}"; then
        echo "$@" | awk '{ print "# "$0;}' | tee -a "${log_file}" >&2
    else
        echo "$@" | awk '{ print "# "$0;}' >&2
    fi
}

export H1="######################################################################"
export H2="- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
export H3="-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -"

export HYRAX_NAME=${HYRAX_NAME:-"hyrax"}
export HTTPD_NAME=${HTTPD_NAME:-"httpd"}
export HYRAX_HOME=${HYRAX_HOME:-"/home/ubuntu/hyrax"}
export DATA_MOUNT=${DATA_MOUNT:-"/usr/share/hyrax"}
export HYRAX_IMAGE=${HYRAX_IMAGE:-"opendap/hyrax:snapshot"}

export HTTPD_IMAGE_DEFAULT="httpd:latest"

# As of 11/16/203 we rolled back to this because of some issue we don't
# understand in httpd:latest - ndp 11/16/2023
export HTTPD_IMAGE_DEFAULT="httpd:2.4.56-bullseye"
export HTTPD_IMAGE=${HTTPD_IMAGE:-"$HTTPD_IMAGE_DEFAULT"}

export APACHE_HTTPD_HOME=${APACHE_HTTPD_HOME:-"/usr/local/apache2"}
export HYRAX_NETWORK=${HYRAX_NETWORK:-"hyrax-net"}
export HYRAX_DEPLOYMENT="http://test.opendap.org"

export THREDDS_CATALOG_ROOT=${THREDDS_CATALOG_ROOT:-""}

export HYRAX_MEMORY=${HYRAX_MEMORY:-"24g"}
export RPM_BUILD_REPO="s3://opendap.travis.build"

export bes_cores_dir
export tomcat_server_xml
export run_privileged
export log_file

################################################################################
#
# show_config()
#
function show_config() {
    local prolog="show_config() -"
    loggy "${prolog} ${H2}"
    loggy "${prolog} "
    loggy "${prolog}   PRIMARY: "
    loggy "${prolog}"
    loggy "${prolog}             HYRAX_NAME: ${HYRAX_NAME}"
    loggy "${prolog}             HTTPD_NAME: ${HTTPD_NAME}"
    loggy "${prolog}             HYRAX_HOME: ${HYRAX_HOME}"
    loggy "${prolog}             DATA_MOUNT: ${DATA_MOUNT}"
    loggy "${prolog}            HYRAX_IMAGE: ${HYRAX_IMAGE}"
    loggy "${prolog}            HTTPD_IMAGE: ${HTTPD_IMAGE}"
    loggy "${prolog}      APACHE_HTTPD_HOME: ${APACHE_HTTPD_HOME}"
    loggy "${prolog}          HYRAX_NETWORK: ${HYRAX_NETWORK}"
    loggy "${prolog}       HYRAX_DEPLOYMENT: ${HYRAX_DEPLOYMENT}"
    loggy "${prolog}           HYRAX_MEMORY: ${HYRAX_MEMORY}"
    loggy "${prolog}"
    loggy "${prolog}  DERIVED: "
    loggy "${prolog}"
    loggy "${prolog}                  log_dir: ${log_dir}"
    loggy "${prolog}                 data_dir: ${data_dir}"
    loggy "${prolog}       bes_site_conf_file: ${bes_site_conf_file}"
    loggy "${prolog}              bes_log_dir: ${bes_log_dir}"
    loggy "${prolog}            bes_cores_dir: ${bes_cores_dir}"
    loggy "${prolog}            olfs_conf_dir: ${olfs_conf_dir}"
    loggy "${prolog}        tomcat_server_xml: ${tomcat_server_xml}"
    loggy "${prolog} tomcat_server_xml_volume: ${tomcat_server_xml_volume}"
    loggy "${prolog}               httpd_conf: ${httpd_conf}"
    loggy "${prolog}           htdocs_content: ${htdocs_content}"
    loggy "${prolog}               expires_sh: ${expires_sh}"
    loggy "${prolog}                    ncwms: ${ncwms}"
    loggy "${prolog}"
}
################################################################################
#
# config_tomcat_server()
#
function config_tomcat_server() {
    local hyrax_home="$1"
    # A Tomcat server.xml file that enables AJP pn 8009
    tomcat_server_xml="${hyrax_home}/tomcat/server.xml"

    # Creates the tomcat server.xml volume mount key pair for the Docker run command.
    export tomcat_server_xml_volume=""
    if test -n "${tomcat_server_xml}"; then
        export tomcat_server_xml_volume="--volume ${tomcat_server_xml}:/tomcat/conf/server.xml"
    fi

}

################################################################################
#
# config_test_opendap_org()
#
# shellcheck disable=SC2120
function config_test_opendap_org() {
    local prolog="config_test_opendap_org() -"
    local hyrax_home=${1:-"${HYRAX_HOME}"}
    local data_dir_in=${2:-"${DATA_MOUNT}"}

    loggy "${prolog} ${H1}"
    loggy "${prolog} BEGIN"
    loggy "${prolog} "
    loggy "${prolog}        Using hyrax_home: ${hyrax_home}"

    # Location of the log directories for bes, olfs**, and tomcat
    export log_dir="${hyrax_home}/log"

    # Set up the location of the data directory for Hyrax.
    # If one is not provided the default ${hyrax_home}/data
    # will be used.
    if test -n "${data_dir_in}"; then
        export data_dir="${data_dir_in}"
    else
        export data_dir="${hyrax_home}/data"
        loggy "${prolog} Using default data_dir value of: ${data_dir}"
    fi

    # The location of the OLFS persistent configuration
    # to be injected into the Hyrax container at /etc/olfs
    #
    # **If this is used then the OLFS logs will be written
    # to ${hyrax_home}/olfs and the log directory
    # ${hyrax_home}/log/olfs will be ignored.
    export olfs_conf_dir="${hyrax_home}/olfs"

    export bes_site_conf_file="${hyrax_home}/bes/site.conf"

    export bes_log_dir="${log_dir}/bes"
    bes_cores_dir="${hyrax_home}/bes/cores"

    config_tomcat_server "${hyrax_home}"

    #
    # Variables for configuring Docker launch of httpd
    #

    # We inject a modified httpd.conf file
    export httpd_conf="${hyrax_home}/httpd/httpd.conf"

    # Our own collection of things that need to be served via http,
    # possibly utilizing range get capabilities
    export htdocs_content="${hyrax_home}/httpd/htdocs"

    # Q: Is expires.sh still in use? Can we drop it?
    # A: Yes it's still in use by libdap4 tests.
    # Q: Can we drop it?
    # A: No we can't without fixing various things
    export expires_sh="${hyrax_home}/httpd/cgi-bin/expires.sh"

    # ncWMS host name to be injected into the ncWMS configuration.
    export ncwms="${HYRAX_DEPLOYMENT}"

    show_config

    loggy "${prolog} END"

}

################################################################################
#
# config_ndp_local()
#
function config_ndp_local() {
    local prolog="config_ndp_local() -"
    export HYRAX_HOME="/Users/ndp/OPeNDAP/hyrax/test.opendap.org"
    local hyrax_home="$HYRAX_HOME"
    loggy "${prolog} ${H1}"
    loggy "${prolog} BEGIN"
    loggy "${prolog} "
    prefix=${prefix:-"/Users/ndp/OPeNDAP/hyrax/build"}
    export ncwms="http://localhost:8080"
    export log_dir="${HYRAX_HOME}/log"
    export bes_log_dir="${log_dir}/bes"
    export bes_cores_dir="${hyrax_home}/bes/cores"
    export data_dir="${prefix}/share/hyrax"
    export olfs_conf_dir="${HYRAX_HOME}/etc/olfs"
    export bes_site_conf_file="${HYRAX_HOME}/bes/site.conf"

    local hyrax_home="$HYRAX_HOME"
    export httpd_conf="${hyrax_home}/httpd/httpd.conf"
    export htdocs_content="${hyrax_home}/httpd/htdocs"
    export expires_sh="${hyrax_home}/httpd/cgi-bin/expires.sh"

    config_tomcat_server "${HYRAX_HOME}"

    show_config

    loggy "${prolog} END"

}
################################################################################
#
# config_rocky_8_local()
#
function config_rocky_8_local() {
    local prolog="config_rocky_8_local() -"
    export HYRAX_HOME="/home/rocky/docker_deploy"
    local hyrax_home="$HYRAX_HOME"
    loggy "${prolog} ${H1}"
    loggy "${prolog} BEGIN"
    loggy "${prolog} "
    prefix=${prefix:-"/home/rocky/hyrax/build"}
    export ncwms="http://localhost:8080"
    export log_dir="${HYRAX_HOME}/log"
    export bes_log_dir="${log_dir}/bes"
    export bes_cores_dir="${hyrax_home}/bes/cores"
    export data_dir="${prefix}/share/hyrax"
    export olfs_conf_dir="/etc/olfs"
    export bes_site_conf_file="${HYRAX_HOME}/bes/site.conf"

    local hyrax_home="$HYRAX_HOME"
    export httpd_conf="${hyrax_home}/httpd/httpd.conf"
    export htdocs_content="${hyrax_home}/httpd/htdocs"
    export expires_sh="${hyrax_home}/httpd/cgi-bin/expires.sh"

    config_tomcat_server "${HYRAX_HOME}"

    show_config

    loggy "${prolog} END"

}


################################################################################
#
# make_network_as_needed()
#
function make_network_as_needed() {
    local prolog="make_network_as_needed() -"
    #
    # Check for the network that will be shared with Apache httpd
    # If it's not found, create it.
    #
    local status=
    docker network inspect ${HYRAX_NETWORK} >/dev/null 2>&1
    status=$?
    if test $status -ne 0; then
        loggy "${prolog} No Docker network by the name of ${HYRAX_NETWORK} was found. Creating..."
        docker network create hyrax-net
        loggy "${prolog} Created Docker network '${HYRAX_NETWORK}' for Hyrax and Apache httpd."
        loggy "${prolog} "
    else
        loggy "${prolog} Docker network '${HYRAX_NETWORK}' exists, using."
        loggy "${prolog} "
    fi

}

################################################################################
#
# delete_network()
#
function delete_network() {
    # Dump Hyrax Docker Network
    docker network rm ${HYRAX_NETWORK}
}

################################################################################
#
# start_httpd()
#
function start_httpd() {
    local prolog="start_httpd() -"

    make_network_as_needed

    loggy "${prolog} Starting Docker container for Apache httpd: ${HTTPD_IMAGE}"
    docker run -d \
        --name ${HTTPD_NAME} \
        --net=${HYRAX_NETWORK} \
        --publish 80:80 \
        --publish 443:443 \
        --volume ${httpd_conf}:${APACHE_HTTPD_HOME}/conf/httpd.conf \
        --volume ${htdocs_content}:${APACHE_HTTPD_HOME}/htdocs \
        --volume ${expires_sh}:${APACHE_HTTPD_HOME}/cgi-bin/expires.sh \
        "${HTTPD_IMAGE}"

    loggy "${prolog} "
    loggy "${prolog} Docker container: ${HTTPD_IMAGE} STARTED."
    loggy "${prolog} END"

}

################################################################################
#
# stop_httpd()
#
function stop_httpd() {
    # Dump httpd container
    docker rm -f "${HTTPD_NAME}"
}

################################################################################
#
# update_httpd()
#
function update_httpd() {
    docker pull "${HTTPD_IMAGE}"
    stop_httpd
    start_httpd
}

function get_platform() {
    local prolog="get_platform() -"
    local sys_arch=
    sys_arch=$(arch)
    loggy "${prolog} sys_arch: $sys_arch"
    local platform=""
    if test $sys_arch = "arm64"; then platform="--platform linux/amd64"; fi
    echo "$platform"
}

function set_file_permissions() {
    local prolog="set_file_permissions() -"
    loggy "${prolog} BEGIN"

    local vers_doc
    vers_doc=$(which sw_vers)
    if test $? -ne 0; then
        local name="testy_besty"

        local platform=""
        platform="$(get_platform)"
        loggy "${prolog} platform: $platform"

        local use_disconnect="-d" # ${disconnect:-"-d"}
        loggy "${prolog} use_disconnect: $use_disconnect"

        loggy "${prolog} Checking bes user info in Hyrax container: ${HYRAX_IMAGE}"
        docker run $use_disconnect $platform --name "${name}" ${HYRAX_IMAGE}

        sleep_time=10
        loggy "${prolog} Waiting $sleep_time seconds for hyrax to get going..."
        sleep $sleep_time

        local bes_uid
        bes_uid=$(docker logs "${name}" 2>&1 | grep bes_uid | awk '{print $2;}')
        loggy "${prolog} bes_uid: ${bes_uid}"

        local bes_gid
        bes_gid=$(docker logs "${name}" 2>&1 | grep bes_gid | awk '{print $2;}')
        loggy "${prolog} bes_gid: ${bes_gid}"

        loggy "${prolog} Stopping Hyrax container: ${HYRAX_IMAGE}"
        docker container rm -f "${name}"

        if test -n "$bes_uid" && test -n "$bes_gid"; then
            loggy "${prolog} Setting ownership of ${bes_log_dir}"
            sudo chown -R ${bes_uid}:${bes_gid} "${bes_log_dir}"
        else
            loggy "${prolog} ERROR - Failed to determine one or both of bes user uid or gid."
            return 1
        fi
    else
        loggy "${prolog} Detected OSX, no permissions were changed."
        loggy $(sw_vers)
    fi
    loggy "${prolog} END"
    return 0
}

function clean_hyrax_logs() {
    local prolog="clean_hyrax_logs() -"
    loggy "${prolog} BEGIN"
    loggy $(rm -vrf ${HYRAX_HOME}/log/bes/*)
    loggy $(rm -vrf ${HYRAX_HOME}/olfs/logs/*)
    loggy $(rm -vrf ${HYRAX_HOME}/log/tomcat/*)
    loggy "${prolog} END"
}

################################################################################
# save_hyrax_logs()
# Saves the bes log file. The tomcat logs and OLFS logs are already being
# saved/rolled like a server should.
function save_hyrax_logs() {
    local prolog="save_hyrax_logs() -"
    loggy "${prolog} BEGIN"

    local date_tag=
    date_tag=$(date +"%Y-%m-%d-%H:%M:%S")
    loggy "${prolog} date_tag: $date_tag"

    local target_dir="${HYRAX_HOME}/crash_logs/$date_tag"
    loggy "${prolog} target_dir: $target_dir"

    mkdir -pv "$target_dir"

    loggy "${prolog} Saving BES log..."
    local source_file=
    source_file="${HYRAX_HOME}/log/bes/bes.log"
    loggy "${prolog} Processing: $source_file"
    if test -f "${source_file}"; then
        cp -v "${source_file}" "${target_dir}/bes.log"
    else
        loggy "$prolog Failed to locate: $source_file"
    fi

    loggy "${prolog} Save the various OLFS logs..."
    for log in olfs-log.json HyraxAccess.log HyraxErrors.log cloud_watch_request.log cloud_watch_response.log BESCommands.log; do
        source_file="${HYRAX_HOME}/olfs/logs/$log"
        loggy "${prolog} Processing: $source_file"
        if test -f "${source_file}"; then
            cp -v "${source_file}" "${target_dir}/${log}"
        else
            loggy "$prolog Failed to locate: $source_file"
        fi
    done

    loggy "${prolog} Save the Tomcat logs..."
    local local_host_log=
    local_host_log=$(basename $(ls -1t "${HYRAX_HOME}/log/tomcat/localhost".* | head -1))
    loggy "${prolog} local_host_log: $local_host_log"
    for log in console.log "${local_host_log}" catalina.out; do
        source_file="${HYRAX_HOME}/log/tomcat/$log"
        loggy "${prolog} Processing: $source_file"

        if test -f "${source_file}"; then
            cp -v "${source_file}" "${target_dir}/tomcat-${log}"
        else
            loggy "$prolog Failed to locate file: $source_file"
        fi
    done
    loggy "${prolog} END"
}
################################################################################
#
# start_simple()
#
function start_debug() {
    local prolog="start_hyrax() -"
    loggy "${prolog} BEGIN"

    save_hyrax_logs
    clean_hyrax_logs

    set_file_permissions
    if test $? -ne 0; then
        loggy "${prolog} ERROR - Unable to set host file permissions. Hyrax was not started."
        return 1
    fi

    local use_disconnect=${disconnect:-"-d"}
    loggy "${prolog} use_disconnect: $use_disconnect"

    local platform=""
    platform="$(get_platform)"
    loggy "${prolog} platform: $platform"

    loggy "${prolog} run_privileged: $run_privileged"

    loggy "${prolog} Starting Hyrax container: ${HYRAX_IMAGE}"
    docker run -d --name "$HYRAX_NAME" -p 8080:8080 -v /usr/share/hyrax:/usr/share/hyrax \
      -v /home/rocky/test.opendap.org/debug:/debug \
      "$HYRAX_IMAGE"
    loggy "${prolog}"
    loggy "${prolog} Docker container: ${HYRAX_IMAGE} STARTED."
    loggy "${prolog}"
    loggy "${prolog} END"

}

################################################################################
#
# start_hyrax()
#
function start_hyrax() {
    local prolog="start_hyrax() -"
    loggy "${prolog} BEGIN"

    save_hyrax_logs
    clean_hyrax_logs

    set_file_permissions
    if test $? -ne 0; then
        loggy "${prolog} ERROR - Unable to set host file permissions. Hyrax was not started."
        return 1
    fi

    make_network_as_needed

    local use_disconnect=${disconnect:-"-d"}
    loggy "${prolog} use_disconnect: $use_disconnect"

    local platform=""
    platform="$(get_platform)"
    loggy "${prolog} platform: $platform"

    loggy "${prolog} run_privileged: $run_privileged"

    loggy "${prolog} Starting Hyrax container: ${HYRAX_IMAGE}"
    docker run $use_disconnect $run_privileged $platform \
        --name ${HYRAX_NAME} \
        --net=${HYRAX_NETWORK} \
        --publish 8009:8009 \
        --publish 8080:8080 \
        --publish 8443:8443 \
        --volume ${data_dir}:/usr/share/hyrax:ro \
        --volume ${bes_log_dir}:/var/log/bes \
        --volume ${bes_cores_dir}:/cores \
        --volume ${log_dir}/tomcat:/usr/share/tomcat/logs \
        --volume ${olfs_conf_dir}:/etc/olfs \
        --volume ${bes_site_conf_file}:/etc/bes/site.conf \
        --memory=${HYRAX_MEMORY} \
        ${tomcat_server_xml_volume} \
        "${HYRAX_IMAGE}" \
        -e support@opendap.org \
        -s \
        -n ${ncwms}
    loggy "${prolog}"
    loggy "${prolog} Docker container: ${HYRAX_IMAGE} STARTED."
    loggy "${prolog}"
    loggy "${prolog} END"

}

################################################################################
# enable_core_dump()
#
# Restarts the container with privileged enabled. Then it uses docker exec and
# bash to configure the running container to create core dump files in /cores
# on container's disk.
#
function enable_core_dump() {
    local prolog="enable_core_dump() -"
    loggy "${H2}"
    loggy "${prolog} BEGIN"
    run_privileged="--ulimit core=-1 --privileged --security-opt seccomp=unconfined "
    loggy "${prolog} run_privileged: $run_privileged"
    stop_hyrax
    start_hyrax
    local naptime=10
    loggy "$prolog Waiting $naptime seconds for Hyrax to arrive..."
    sleep 10

    loggy ""
    loggy "${prolog} Setting kernel.core.pattern in docker image:"
    loggy "$(docker exec -it ${HYRAX_NAME} bash -c "sysctl -w kernel.core_pattern=/cores/core-%e.%p.%h.%t; echo \"status: $?\"")"

    loggy ""
    loggy "${prolog} docker ulimit: "
    loggy "$(docker exec -it ${HYRAX_NAME} bash -c "ulimit -a")"

    loggy ""
    loggy "${prolog} host ulimit:"
    loggy "$(ulimit -a)"
    loggy ""

    loggy ""
    loggy "${prolog} In docker container modify /etc/systemd/system.conf to all core dumps:"
    loggy "$(docker exec -it ${HYRAX_NAME} bash -c "echo \"DumpCore=yes\" >> /etc/systemd/system.conf; cat /etc/systemd/system.conf; ")"
    loggy ""

}


################################################################################
# check_for_aws_config()
#
function check_for_aws_config() {
    local prolog="check_for_aws_config() -"
    local status
    local msg

    msg="$(aws sts get-caller-identity 2>&1 )"
    status=$?
    if test $status -ne 0
    then
        loggy "$prolog ERROR! The AWS CLI is not configured unable to use AWS CLI."
        loggy "$prolog AWS status: $status"
        loggy "$prolog AWS message: "$msg
    else
        loggy "$prolog AWS CLI is configured! user: "
        loggy "$msg"
    fi

    return $status
}


################################################################################
# install_linux_debug_packages()
#
# This is probably brittle - I think I got this list from gdb when
# I tried to look at a core dump with only the hyrax debuginfo RPMs
# installed. Given that the version numbers are "fully qualified" I
# suspect that when any of these packages gets updated the reference
# below will be out of date. For the core dump inspection the binary
# stuff has to match, or it's a debug train wreck.
#
function install_linux_debug_packages() {
    local prolog="install_linux_debug_packages() -"

    loggy "$prolog Installing various debug info..."
    docker exec -it hyrax bash -c "yum debuginfo-install -y \
        bzip2-libs-1.0.6-28.el8_10.x86_64 \
        glibc-2.28-251.el8_10.25.x86_64 \
        keyutils-libs-1.5.10-9.el8.x86_64 \
        krb5-libs-1.18.2-32.el8_10.x86_64 \
        libcom_err-1.45.6-6.el8_10.x86_64 \
        libcurl-minimal-7.61.1-34.el8_10.3.x86_64 \
        libgcc-8.5.0-28.el8_10.x86_64 \
        libicu-60.3-2.el8_1.x86_64 \
        libnghttp2-1.33.0-6.el8_10.1.x86_64 \
        libselinux-2.9-10.el8_10.x86_64 \
        libstdc++-8.5.0-28.el8_10.x86_64 \
        libtirpc-1.1.4-12.el8_10.x86_64 \
        libuuid-2.32.1-46.el8.x86_64 \
        libxml2-2.9.7-21.el8_10.3.x86_64 \
        libzstd-1.4.4-1.el8.x86_64 \
        openssl-libs-1.1.1k-14.el8_10.x86_64 \
        pcre2-10.32-3.el8_6.x86_64 \
        xz-libs-5.2.4-4.el8_6.x86_64 \
        zlib-1.2.11-26.el8.x86_64"
}

################################################################################
# enable_debugging()
#
# This will call enable_core_dump() which stops and then starts the server
# so the server should available for interrogation and configuration.
#
function enable_debugging() {
    local prolog="enable_debugging() -"
    local status
    loggy "$H1"
    loggy "$prolog BEGIN"
    loggy ""

    #-----------------------------------------------------------------
    # Make sure we have AWS CLI so we can get rpm files from our s3 bucket
    check_for_aws_config
    status=$?
    if test $status -ne 0
    then
        loggy "$prolog ERROR! AWS CLI Not configured."
        # loggy  "$prolog status: $status"
        return $status
    fi
    loggy ""

    #-----------------------------------------------------------------
    # Enable core dumps
    enable_core_dump

    #-----------------------------------------------------------------
    # We grab the version response from the running server
    local version_response
    version_response=$(curl http://localhost:8080/opendap/version)
    # echo "Version Response: $version_response"

    #-----------------------------------------------------------------
    # Using the version response document, get and install the
    # libdap4 debuginfo rpm
    local libdap4_version
    libdap4_version=$(echo "$version_response" | grep "library name=\"libdap\"" | awk '{ split($3,v,"="); gsub("\"","",v[2]); print v[2] ;}')
    echo "libdap_version: $libdap4_version"

    local libdap_debug_rpm="libdap-debuginfo-$libdap4_version.el8.x86_64.rpm"
    loggy "$prolog libdap_debug_rpm: $libdap_debug_rpm"

    loggy "$prolog       Retrieving: $libdap_debug_rpm"
    aws s3 cp "$RPM_BUILD_REPO/$libdap_debug_rpm" "$bes_cores_dir"

    loggy "$prolog       Installing: $libdap_debug_rpm"
    docker exec -it hyrax bash -c "yum install -y /cores/$libdap_debug_rpm"

    #-----------------------------------------------------------------
    # Using the version response document, get and install the
    # BES debuginfo rpm
    local bes_version
    bes_version=$(echo "$version_response" | grep "library name=\"bes\"" | awk '{ split($3,v,"="); gsub("\"","",v[2]); print v[2]; }')
    echo "bes_version: $bes_version"

    local bes_debug_rpm="bes-debuginfo-$bes_version.static.el8.x86_64.rpm"
    loggy "$prolog    bes_debug_rpm: $bes_debug_rpm"

    loggy "$prolog       Retrieving: $bes_debug_rpm"
    aws s3 cp "$RPM_BUILD_REPO/$bes_debug_rpm"    "$bes_cores_dir"

    loggy "$prolog       Installing: $bes_debug_rpm"
    docker exec -it hyrax bash -c "yum install -y /cores/$bes_debug_rpm"

    #-----------------------------------------------------------------
    # Get the ancillary debugging symbols.
    install_linux_debug_packages

    loggy "$prolog END"

    return $status
}


################################################################################
#
# stop_hyrax()
#
function stop_hyrax() {
    local prolog="stop_hyrax() -"
    loggy "${prolog} BEGIN"
    # Dump Hyrax container
    loggy "${prolog} Forcibly removing the container: ${HYRAX_NAME}"
    loggy "${prolog} Removed: "$(docker rm -f "${HYRAX_NAME}")
    loggy "${prolog} END"
}
################################################################################
#
# update_hyrax()
#
function update_hyrax() {
    local prolog="stop_hyrax() -"
    loggy "${prolog} BEGIN"
    docker pull "${HYRAX_IMAGE}"
    stop_hyrax
    start_hyrax
    loggy "${prolog} END"
}

################################################################################
#
# start_all()
#
function start_all() {
    local prolog="start_all() -"
    loggy "${prolog} BEGIN"
    start_hyrax
    start_httpd
    loggy "${prolog} END"
}

################################################################################
#
# stop_all()
#
function stop_all() {
    loggy "stop_all() - BEGIN"
    # Dump all containers
    docker rm -f $(docker ps -aq)
    # Dump the network.
    docker network rm ${HYRAX_NETWORK}
    loggy "stop_all() - END"
}

################################################################################
#
# clean_and_update()
#
function clean_and_update_all() {
    loggy "clean_and_update_all() - BEGIN"
    stop_all
    # Dump ALL the images
    docker rmi -f $(docker images -q)
    # Pull our stuff
    docker pull ${HYRAX_IMAGE}
    docker pull ${HTTPD_IMAGE}
    loggy "clean_and_update_all() - END"
}

################################################################################
# Opens an interactive bash shell on the Hyrax container.
function dshell() {
    docker exec -it ${HYRAX_NAME} /bin/bash
}

################################################################################
#
# usage()
#
function usage() {
    loggy "${H1}"
    loggy "NAME"
    loggy "  hyraxctl - hyrax control"
    loggy ""
    loggy "SYNOPSIS"
    loggy "  hyraxctl cmd1 [cmd2 ... cmdN]"
    loggy ""
    loggy "DESCRIPTION"
    loggy "  The hyraxctl utility implements a collection of commands that "
    loggy "  allow one to start, stop, and update Hyrax and Apache httpd docker"
    loggy "  images with all of the configuration and resources needed to"
    loggy "  operate test.opendap.org."
    loggy "  The commands can be invoked by using one or more in the hyraxctl"
    loggy "  commandline line invocation:"
    loggy "  "
    loggy "      ./hyraxctl show_config"
    loggy "  "
    loggy "  Or, for two or more commands:"
    loggy "  "
    loggy "      ./hyraxctl config_test_opendap_org start_all"
    loggy "  "
    loggy "  Primary configuration values can be exported in the parent shell"
    loggy "  in order to inject different. Additionally, the file can be"
    loggy "  sourced:"

    loggy "      source ./hyraxctl"
    loggy "      . ./hyraxctl"
    loggy "  "
    loggy "  After which all of the commands will be directly available in the current"
    loggy "  shell:"
    loggy "      # . ./hyraxctl"
    loggy "      # show_config"
    loggy "      # start_all"
    loggy "      # stop_all"
    loggy ""
    loggy "   The available commands follow:"
    loggy ""
    loggy "            show_config - Sends the configuration state to stderr."
    loggy "config_test_opendap_org - Configures the shell for deployment on"
    loggy "                          test.opendap.org (ubuntu Docker host)"
    loggy "       config_ndp_local - Configures the shell for dev deployment"
    loggy "                          on ndp's system."
    loggy "   config_rocky_8_local - Configures the shell for aam AWS rocky8 system"
    loggy "                          and user rocky."
    loggy ""
    loggy "       enable_debugging - Launches an instance set up with debuginfo symbols"
    loggy "                          and core dumps enabled. AWS CLI must be conifgured!"
    loggy ""
    loggy "              start_all - Makes the docker network, starts Hyrax,"
    loggy "                          starts httpd."
    loggy "               stop_all - Stops and deletes all containers, deletes"
    loggy "                          docker network."
    loggy "            start_hyrax - Starts Hyrax in the docker engine using"
    loggy "                          configuration values in the env."
    loggy "             stop_hyrax - Deletes the running (or not) hyrax "
    loggy "                          container from the docker engine."
    loggy "           update_hyrax - Pulls the latest HYRAX_IMAGE tag (currently: "
    loggy "                          ${HYRAX_IMAGE}), stops the Hyrax container,"
    loggy "                          and then starts the (possibly updated) image."
    loggy "            start_httpd - Starts httpd in the docker engine using"
    loggy "                          configuration values in the env."
    loggy "             stop_httpd - Deletes the running (or not) httpd "
    loggy "                          container from the docker engine."
    loggy "           update_httpd - Pulls the latest HYRAX_IMAGE tag (currently: "
    loggy "                          ${HTTPD_IMAGE}), stops the Hyrax container,"
    loggy "                          and then starts the (possibly updated) image."
    loggy "   clean_and_update_all - Stops and deletes all containers, deletes"
    loggy "                          docker network, deletes all images, pulls"
    loggy "                          Hyrax and httpd by tag"
    loggy ""
    loggy " make_network_as_needed - Creates docker network for Hyrax and"
    loggy "                          httpd, as needed."
    loggy "         delete_network - Deletes the docker network for Hyrax"
    loggy "                          and httpd."
    loggy ""
    loggy "${H3}"
}


function run_cmd() {
    local cmd="${1}"

    if test "${cmd}" == "show_config"; then
        show_config
    elif test "${cmd}" == "config_test_opendap_org"; then
        config_test_opendap_org
    elif test "${cmd}" == "config_ndp_local"; then
        config_ndp_local
    elif test "${cmd}" == "start_all"; then
        start_all
    elif test "${cmd}" == "stop_all"; then
        stop_all
    elif test "${cmd}" == "start_hyrax"; then
        start_hyrax
    elif test "${cmd}" == "stop_hyrax"; then
        stop_hyrax
    elif test "${cmd}" == "start_httpd"; then
        start_httpd
    elif test "${cmd}" == "stop_httpd"; then
        stop_httpd
    elif test "${cmd}" == "clean_and_update"; then
        clean_and_update
    elif test "${cmd}" == "make_network_as_needed"; then
        make_network_as_needed
    elif test "${cmd}" == "delete_network"; then
        delete_network
    else
        echo "ERROR Unrecognized command: ${cmd}" >&2
        usage
    fi
}

echo "ArgCount: $#" >&2
if test "$#" -gt 0; then
    for a_cmd in "$@"; do
        echo "Running command: ${a_cmd}" >&2
        run_cmd "${a_cmd}"
    done
else
    config_test_opendap_org
    usage
fi

# libdap: 3.21.1-273
# bes: 3.21.1-653
